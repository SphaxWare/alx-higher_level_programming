The ''7-base_geometry'' Module.

Import function from module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
# Correct Class Type test
>>> bg = BaseGeometry()
>>> type(bg) == BaseGeometry
True

# area() instance method
# ----------------------
# area method is an instance method:
>>> type(BaseGeometry.__dict__['area'])
<class 'function'>

# area method called via class with no args:
>>> bg.__class__.area()
Traceback (most recent call last):
TypeError: area() missing 1 required positional argument: 'self'

# area method args test (1 arg):
>>> bg.area(5)
Traceback (most recent call last):
TypeError: area() takes 1 positional argument but 2 were given

# area method normal test:
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented


# integer_validator() instance method
# -----------------------------------
# integer_validator method is an instance method:
>>> type(BaseGeometry.__dict__['integer_validator'])
<class 'function'>

# integer_validator method called via class with no args:
>>> bg.__class__.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 3 required positional arguments: 'self', 'test2', and 'test3'

# integer_validator method arg test (0 args):
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'test2' and 'test3'

# integer_validator method arg test (3 args):
>>> bg.integer_validator(5, 3, 5)
Traceback (most recent call last):
TypeError: integer_validator() takes 3 positional arguments but 4 were given

# integer_validator method float.0 value:
>>> bg.integer_validator("test1", 3.0)
Traceback (most recent call last):
TypeError: test1 must be an integer

# integer_validator method float.x value:
>>> bg.integer_validator("test2", 3.14)
Traceback (most recent call last):
TypeError: test2 must be an integer

# integer_validator method string value:
>>> bg.integer_validator("test3", "test1")
Traceback (most recent call last):
TypeError: test3 must be an integer

# integer_validator method bool value:
>>> bg.integer_validator("test3", True)
Traceback (most recent call last):
TypeError: test3 must be an integer

# integer_validator method list value:
>>> bg.integer_validator("test1", [5])
Traceback (most recent call last):
TypeError: test1 must be an integer

# integer_validator method None value:
>>> bg.integer_validator("test2", None)
Traceback (most recent call last):
TypeError: test2 must be an integer

# integer_validator method 0 value:
>>> bg.integer_validator("test3", 0)
Traceback (most recent call last):
ValueError: test3 must be greater than 0

# integer_validator method negative value:
>>> bg.integer_validator("test3", -5)
Traceback (most recent call last):
ValueError: test3 must be greater than 0

# integer_validator method ok value:
>>> bg.integer_validator("test3", 3)

# integer_validator method ok value 2:
>>> bg.integer_validator("test3", 5)

# integer_validator method empty string:
>>> bg.integer_validator("", 5)

# integer_validator method None as name:
>>> bg.integer_validator(None, 5)

# integer_validator method tuple:
>>> bg.integer_validator("test1", (5, 3))
Traceback (most recent call last):
TypeError: test1 must be an integer

# integer_validator method dic:
>>> bg.integer_validator("test1", {5, 3})
Traceback (most recent call last):
TypeError: test1 must be an integer
